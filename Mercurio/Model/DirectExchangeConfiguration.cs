// -------------------------------------------------------------------------------------------------
//  <copyright file="DirectExchangeConfiguration.cs" company="Starion Group S.A.">
// 
//    Copyright 2025 Starion Group S.A.
// 
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
// 
//        http://www.apache.org/licenses/LICENSE-2.0
// 
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
// 
//  </copyright>
//  ------------------------------------------------------------------------------------------------

namespace Mercurio.Model
{
    using RabbitMQ.Client;

    /// <summary>
    /// The <see cref="DirectExchangeConfiguration" /> is an <see cref="IExchangeConfiguration" /> that support the
    /// <see cref="RabbitMQ.Client.ExchangeType.Direct" /> exchange
    /// </summary>
    public class DirectExchangeConfiguration : BaseExchangeConfiguration
    {
        /// <summary>
        /// Gets the name of the pre-defined exchange name
        /// </summary>
        public const string PreDefinedDirectExchangeName = "amq.direct";

        /// <summary>
        /// Initializes a new instance of <see cref="DirectExchangeConfiguration" />
        /// </summary>
        /// <param name="queueName">The name of the queue to be created or used. Default value is <i>string.empty</i>. In case of empty, the queue name is generated by the server</param>
        /// <param name="exchangeName">
        /// A specific name for the exchange to use. Default value is
        /// <see cref="PreDefinedDirectExchangeName" />. In case of empty, the default direct exchange is used.
        /// </param>
        /// <param name="routingKey">Defines a specific routing key to be used. Default value is <i>string.empty</i>.</param>
        /// <param name="isTemporary">
        /// Asserts that the queue should be a temporary one or not. In case of a temporary queue, the queue is automatically deleted when the consumer
        /// of the queue disconnects.
        /// </param>
        /// <exception cref="ArgumentNullException">If any of the of string arguments is null</exception>
        /// <exception cref="ArgumentException">If the <paramref name="exchangeName"/> is not set but the <paramref name="routingKey"/> is</exception>
        public DirectExchangeConfiguration(string queueName = "", string exchangeName = PreDefinedDirectExchangeName, string routingKey = "", bool isTemporary = false) :
            base(queueName, exchangeName, routingKey, isTemporary)
        {
            if (!string.IsNullOrWhiteSpace(routingKey) && string.IsNullOrWhiteSpace(exchangeName))
            {
                throw new ArgumentException("The Exchange have to be specified for a specific Routing Key", nameof(exchangeName));
            }
        }

        /// <summary>
        /// Declares the message queue if not declared yet
        /// </summary>
        /// <param name="channel">The <see cref="IChannel" /> that will handle the queue</param>
        /// <param name="isDeclareForPush">Asserts that the declaration is used for a push action</param>
        /// <returns>An awaitable <see cref="Task" /></returns>
        /// <exception cref="ArgumentNullException">If the provided <paramref name="channel"/> is null</exception>
        public override Task EnsureQueueAndExchangeAreDeclaredAsync(IChannel channel, bool isDeclareForPush)
        {
            if (channel == null)
            {
                throw new ArgumentNullException(nameof(channel), "The channel cannot be null");
            }

            return this.EnsureQueueAndExchangeAreDeclaredInternalAsync(channel, isDeclareForPush);
        }

        /// <summary>
        /// Declares the message queue if not declared yet
        /// </summary>
        /// <param name="channel">The <see cref="IChannel" /> that will handle the queue</param>
        /// <param name="isDeclareForPush">Asserts that the declaration is used for a push action</param>
        /// <returns>An awaitable <see cref="Task" /></returns>
        private async Task EnsureQueueAndExchangeAreDeclaredInternalAsync(IChannel channel, bool isDeclareForPush)
        {
            if (!string.IsNullOrEmpty(this.ExchangeName))
            {
                if (this.ExchangeName != PreDefinedDirectExchangeName)
                {
                    await channel.ExchangeDeclareAsync(this.ExchangeName, ExchangeType.Direct);
                }
                else
                {
                    await channel.ExchangeDeclareAsync(this.ExchangeName, ExchangeType.Direct, true, false);
                }
            }

            if (isDeclareForPush)
            {
                return;
            }

            var queueDeclared = await channel.QueueDeclareAsync(this.QueueName, false, false, this.IsTemporary);
            this.QueueName = queueDeclared.QueueName;

            if (!string.IsNullOrEmpty(this.ExchangeName))
            {
                await channel.QueueBindAsync(this.QueueName, this.ExchangeName, this.RoutingKey);
            }
        }
    }
}
