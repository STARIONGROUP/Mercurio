// -------------------------------------------------------------------------------------------------
//  <copyright file="BaseExchangeConfiguration.cs" company="Starion Group S.A.">
// 
//    Copyright 2025 Starion Group S.A.
// 
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
// 
//        http://www.apache.org/licenses/LICENSE-2.0
// 
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
// 
//  </copyright>
//  ------------------------------------------------------------------------------------------------

namespace Mercurio.Model
{
    using RabbitMQ.Client;

    /// <summary>
    /// Base abstract class for the <see cref="IExchangeConfiguration" />
    /// </summary>
    public abstract class BaseExchangeConfiguration : IExchangeConfiguration
    {
        /// <summary>Initializes a new instance of the <see cref="BaseExchangeConfiguration"></see> class.</summary>
        /// <param name="queueName">The name of the queue to be created or used. In case of empty, the queue name is generated by the server</param>
        /// <param name="exchangeName">A specific name for the exchange to use. In case of empty, the default direct exchange is used.</param>
        /// <param name="routingKey">Defines a specific routing key to be used.</param>
        /// <param name="isTemporary">
        /// Asserts that the queue should be a temporary one or not. In case of a temporary queue, the queue is automatically deleted when the consumer
        /// of the queue disconnects.
        /// </param>
        /// <exception cref="ArgumentNullException">If any of the of string arguments is null</exception>
        protected BaseExchangeConfiguration(string queueName, string exchangeName, string routingKey, bool isTemporary)
        {
            this.QueueName = queueName ?? throw new ArgumentNullException(nameof(queueName), "The queue name cannot be null.");
            this.ExchangeName = exchangeName ?? throw new ArgumentNullException(nameof(exchangeName), "The exchange name cannot be null.");
            this.RoutingKey = routingKey ?? throw new ArgumentNullException(nameof(routingKey), "The routing key cannot be null.");
            this.IsTemporary = isTemporary;
        }

        /// <summary>
        /// Gets the routing key that should be used
        /// </summary>
        public string RoutingKey { get; protected set; }

        /// <summary>
        /// Gets the name of the used exchange
        /// </summary>
        public string ExchangeName { get; protected set; }

        /// <summary>
        /// Asserts that the used queue should be a temporary one
        /// </summary>
        public bool IsTemporary { get; protected set; }

        /// <summary>
        /// The name of the queue
        /// </summary>
        public string QueueName { get; protected set; }

        /// <summary>
        /// Gets the name of the exchange that should be used to push message
        /// </summary>
        public virtual string PushExchangeName => this.ExchangeName;

        /// <summary>
        /// Declares the message queue if not declared yet
        /// </summary>
        /// <param name="channel">The <see cref="IChannel" /> that will handle the queue</param>
        /// <param name="isDeclareForPush">Asserts that the declaration is used for a push action</param>
        /// <returns>An awaitable <see cref="Task" /></returns>
        public abstract Task EnsureQueueAndExchangeAreDeclaredAsync(IChannel channel, bool isDeclareForPush);
    }
}
